<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
        
<mapper namespace="customerConsolidation">
	<resultMap type="com.secuve.agentInfo.vo.CustomerConsolidation" id="customerConsolidation"></resultMap>
	
	<select id="getCustomerConsolidation" resultMap="customerConsolidation">
		SELECT *
    	FROM
    	(
    		SELECT ROW_NUMBER() OVER(ORDER BY ${sidx} ${sord}) RowNo, a.*
    		FROM (
				SELECT *
				FROM customerConsolidation
					<include refid="sqlCustomerConsolidation" />
			) a
		) b
    	WHERE b.RowNo between (1+(${page} - 1 ) * ${rows}) and (${page} * ${rows});
	</select>
	
	<select id="getCustomerConsolidationListCount" resultType="_int">
		SELECT COUNT(*) FROM customerConsolidation
			<include refid="sqlCustomerConsolidation" />
	</select>
	
	<insert id="insertSales">
		INSERT INTO customerConsolidation(customerConsolidationCustomer,customerConsolidationBusiness,customerConsolidationQuantity,customerConsolidationBusinessPeriodStart,customerConsolidationBusinessPeriodEnd,customerConsolidationContractDate,customerConsolidationDepartment,customerConsolidationRegistrant,customerConsolidationRegistrationDate)
		VALUES(#{customerConsolidationCustomerView},#{customerConsolidationBusinessView},#{customerConsolidationQuantityView},#{customerConsolidationBusinessPeriodStartView},#{customerConsolidationBusinessPeriodEndView},#{customerConsolidationContractDateView},'영업본부',#{customerConsolidationRegistrant},#{customerConsolidationRegistrationDate});
	</insert>
	
	<select id="getDuplicationCustomerBusiness" resultType="_int">
		SELECT COUNT(*) FROM customerConsolidation WHERE customerConsolidationCustomer = #{customerConsolidationCustomerView} AND customerConsolidationBusiness = #{customerConsolidationBusinessView};
	</select>
	
	<delete id="delCustomerConsolidation">
		DELETE FROM customerConsolidation WHERE customerConsolidationKeyNum = #{customerConsolidationKeyNum}
		<if test="customerConsolidationDepartment != 'ADMIN'">
			AND customerConsolidationDepartment = #{customerConsolidationDepartment}
		</if>
	</delete>
	
	<select id="getCustomerConsolidationOne" parameterType="_int" resultMap="customerConsolidation">
		SELECT * FROM customerConsolidation WHERE customerConsolidationKeyNum = #{customerConsolidationKeyNum};
	</select>
	
	<update id="updateSales">
		UPDATE customerConsolidation SET customerConsolidationCustomer=#{customerConsolidationCustomerView}, customerConsolidationBusiness=#{customerConsolidationBusinessView}, customerConsolidationQuantity=#{customerConsolidationQuantityView}, customerConsolidationBusinessPeriodStart=#{customerConsolidationBusinessPeriodStartView}, customerConsolidationBusinessPeriodEnd=#{customerConsolidationBusinessPeriodEndView}, customerConsolidationContractDate=#{customerConsolidationContractDateView}, customerConsolidationModifier=#{customerConsolidationModifier}, customerConsolidationModifiedDate=#{customerConsolidationModifiedDate} 
		WHERE customerConsolidationKeyNum = #{customerConsolidationKeyNum};
	</update>
	
	<select id="getDuplicationCustomerBusinessLocation" resultType="_int">
		SELECT COUNT(*) FROM customerConsolidation WHERE customerConsolidationCustomer = #{customerConsolidationCustomerView} AND customerConsolidationBusiness = #{customerConsolidationBusinessView} AND customerConsolidationLocation = #{customerConsolidationLocationView};
	</select>
	
	<insert id="insertSecurityInfo">
		INSERT INTO customerConsolidation(customerConsolidationCustomer,customerConsolidationBusiness,customerConsolidationQuantity,customerConsolidationBusinessPeriodStart,customerConsolidationBusinessPeriodEnd,customerConsolidationContractDate,customerConsolidationLocation,customerConsolidationEngineer,customerConsolidationEngineerId,customerConsolidationCustomerManager,customerConsolidationEmail,customerConsolidationContact,customerConsolidationDepartment,customerConsolidationRegistrant,customerConsolidationRegistrationDate)
		VALUES(#{customerConsolidationCustomerView},#{customerConsolidationBusinessView},#{customerConsolidationQuantityView},#{customerConsolidationBusinessPeriodStartView},#{customerConsolidationBusinessPeriodEndView},#{customerConsolidationContractDateView},#{customerConsolidationLocationView},#{customerConsolidationEngineerView},#{customerConsolidationEngineerIdView},#{customerConsolidationCustomerManagerView},#{customerConsolidationEmailView},#{customerConsolidationContactView},'보안기술사업본부',#{customerConsolidationRegistrant},#{customerConsolidationRegistrationDate});
	</insert>
	
	<update id="updateSecurityInfo">
		UPDATE customerConsolidation SET customerConsolidationLocation=#{customerConsolidationLocationView}, customerConsolidationEngineer=#{customerConsolidationEngineerView}, customerConsolidationCustomerManager=#{customerConsolidationCustomerManagerView}, customerConsolidationEngineerId=#{customerConsolidationEngineerIdView}, customerConsolidationEmail=#{customerConsolidationEmailView}, customerConsolidationContact=#{customerConsolidationContactView}, customerConsolidationModifier=#{customerConsolidationModifier}, customerConsolidationModifiedDate=#{customerConsolidationModifiedDate}
		WHERE customerConsolidationKeyNum = #{customerConsolidationKeyNum};
	</update>
	
	<select id="getEngineerList" resultMap="customerConsolidation">
		SELECT employeeId, employeeName
    	FROM
    	(
    		SELECT ROW_NUMBER() OVER(ORDER BY ${sidx} ${sord}) RowNo, a.*
    		FROM (
				SELECT employeeId, employeeName
				FROM employee
				WHERE departmentFullPath LIKE CONCAT('%','보안기술분석실','%')
				<if test="employeeName != null and employeeName != ''">
					AND employeeName LIKE CONCAT('%',#{employeeName},'%')
				</if>
			) a
		) b
    	WHERE b.RowNo between (1+(${page} - 1 ) * ${rows}) and (${page} * ${rows});
	</select>
	
	<select id="getEngineerCount" resultType="_int">
		SELECT COUNT(*) FROM employee
		WHERE departmentFullPath LIKE CONCAT('%','보안기술분석실','%')
		<if test="employeeName != null and employeeName != ''">
			AND employeeName LIKE CONCAT('%',#{employeeName},'%')
		</if>
	</select>
	
	<!-- ==================================================================================== -->
	
	<sql id="sqlCustomerConsolidation">
		<trim prefix="WHERE" prefixOverrides="AND|OR">
			<if test="customerConsolidationCustomer != null and customerConsolidationCustomer != ''">
				AND (
				<trim prefix="" prefixOverrides="OR">
					<foreach collection="customerConsolidationCustomerArr" item="arr">
						OR customerConsolidationCustomer LIKE CONCAT('%',#{arr},'%')
					</foreach>
				</trim>
				)
			</if>
			<if test="customerConsolidationBusiness != null and customerConsolidationBusiness != ''">
				AND (
				<trim prefix="" prefixOverrides="OR">
					<foreach collection="customerConsolidationBusinessArr" item="arr">
						OR customerConsolidationBusiness LIKE CONCAT('%',#{arr},'%')
					</foreach>
				</trim>
				)
			</if>
			<if test="customerConsolidationLocation != null and customerConsolidationLocation != ''">
				AND (
				<trim prefix="" prefixOverrides="OR">
					<foreach collection="customerConsolidationLocationArr" item="arr">
						OR customerConsolidationLocation LIKE CONCAT('%',#{arr},'%')
					</foreach>
				</trim>
				)
			</if>
			<if test="customerConsolidationEngineer != null and customerConsolidationEngineer != ''">
				AND (
				<trim prefix="" prefixOverrides="OR">
					<foreach collection="customerConsolidationEngineerArr" item="arr">
						OR customerConsolidationEngineer LIKE CONCAT('%',#{arr},'%')
					</foreach>
				</trim>
				)
			</if>
			<if test="customerConsolidationCustomerManager != null and customerConsolidationCustomerManager != ''">
				AND (
				<trim prefix="" prefixOverrides="OR">
					<foreach collection="customerConsolidationCustomerManagerArr" item="arr">
						OR customerConsolidationCustomerManager LIKE CONCAT('%',#{arr},'%')
					</foreach>
				</trim>
				)
			</if>
			<if test="customerConsolidationEmail != null and customerConsolidationEmail != ''">
				AND (
				<trim prefix="" prefixOverrides="OR">
					<foreach collection="customerConsolidationEmailArr" item="arr">
						OR customerConsolidationEmail LIKE CONCAT('%',#{arr},'%')
					</foreach>
				</trim>
				)
			</if>
			<if test="customerConsolidationContact != null and customerConsolidationContact != ''">
				AND (
				<trim prefix="" prefixOverrides="OR">
					<foreach collection="customerConsolidationContactArr" item="arr">
						OR customerConsolidationContact LIKE CONCAT('%',#{arr},'%')
					</foreach>
				</trim>
				)
			</if>
			<if test="customerConsolidationDepartment != null and customerConsolidationDepartment != ''">
				AND (
				<trim prefix="" prefixOverrides="OR">
					<foreach collection="customerConsolidationDepartmentArr" item="arr">
						OR customerConsolidationDepartment LIKE CONCAT('%',#{arr},'%')
					</foreach>
				</trim>
				)
			</if>
			<if test="customerConsolidationQuantity != null and customerConsolidationQuantity != ''">
				AND customerConsolidationQuantity = #{customerConsolidationQuantity}
			</if>
			<!-- <if test="customerConsolidationBusinessPeriod != null and customerConsolidationBusinessPeriod != ''">
				AND customerConsolidationBusinessPeriod = #{customerConsolidationBusinessPeriod}
			</if> -->
			<if test="customerConsolidationContractDateStart != null and customerConsolidationContractDateStart != ''">
				AND customerConsolidationContractDate BETWEEN #{customerConsolidationContractDateStart} AND #{customerConsolidationContractDateEnd}
			</if>
		</trim>
	</sql>
	
</mapper>