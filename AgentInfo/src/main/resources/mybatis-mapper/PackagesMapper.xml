<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
        
<mapper namespace="packages">
	<resultMap type="com.secuve.agentInfo.vo.Packages" id="packages"></resultMap>
	
	<select id="getPackages" resultMap="packages" parameterType="string">
		SELECT *
    	FROM
    	(
    		SELECT ROW_NUMBER() OVER(ORDER BY ${sidx} ${sord}) RowNo, a.*
    		FROM (
				SELECT *
				FROM packages
					<include refid="sqlPackages" />
			) a
		) b
    	WHERE b.RowNo between (1+(${page} - 1 ) * ${rows}) and (${page} * ${rows});
	</select>
	
	<select id="getPackagesCount" resultType="_int">
		SELECT COUNT(*) FROM packages
			<include refid="sqlPackages" />
	</select>
	
	<delete id="delPackages" parameterType="_int">
		DELETE FROM packages WHERE packagesKeyNum = #{packagesKeyNum};
	</delete>
	
	<select id="getPackagesKeyNum" resultType="_int">
		SELECT MAX(packagesKeyNum) FROM packages;
	</select>
	
	<insert id="insertPackages">
		INSERT INTO packages(packagesKeyNum, packagesKeyNumOrigin, customerName, businessName, requestDate, deliveryData, state, existingNew, managementServer, agentOS, osDetailVersion, generalCustom, osType, agentVer, packageName, manager, requestProductCategory, deliveryMethod, note, packagesRegistrant, packagesRegistrationDate, statusComment)
		VALUES (#{packagesKeyNum}, #{packagesKeyNumOrigin}, #{customerNameView}, #{businessNameView}, #{requestDateView}, #{deliveryDataView}, '배포완료', #{existingNewView}, #{managementServerView}, #{agentOSView}, #{osDetailVersionView}, #{generalCustomView}, #{osTypeView}, #{agentVerView}, #{packageNameView}, #{managerView}, #{requestProductCategoryView}, #{deliveryMethodView}, #{noteView}, #{packagesRegistrant}, #{packagesRegistrationDate}, #{statusComment});
	</insert>
	
	<select id="getPackagesOne" parameterType="_int" resultMap="packages">
		SELECT * FROM packages WHERE packagesKeyNum = #{packagesKeyNum};	
	</select>
	
	<update id="updatePackages">
		UPDATE packages SET packagesKeyNum = #{packagesKeyNum}, customerName = #{customerNameView}, businessName = #{businessNameView}, requestDate = #{requestDateView}, deliveryData = #{deliveryDataView}, existingNew = #{existingNewView}, managementServer = #{managementServerView}, agentOS = #{agentOSView}, osDetailVersion = #{osDetailVersionView}, generalCustom = #{generalCustomView}, osType = #{osTypeView}, agentVer = #{agentVerView}, packageName = #{packageNameView}, manager = #{managerView}, requestProductCategory = #{requestProductCategoryView}, deliveryMethod = #{deliveryMethodView}, note = #{noteView}, packagesModifier = #{packagesModifier}, packagesModifiedDate = #{packagesModifiedDate}
		WHERE packagesKeyNum = #{packagesKeyNum};
	</update>
	
	<select id="getPackagesListAll" resultMap="packages" parameterType="string">
		SELECT * FROM packages
			<include refid="sqlPackages" />
	</select>
	
	<update id="plusPackagesKeyNum">
		UPDATE packages SET packagesKeyNumOrigin = packagesKeyNumOrigin + 1 WHERE packagesKeyNumOrigin > #{packagesKeyNumOrigin};
	</update>
	
	<select id="getChartManagementServer" resultMap="packages">
		SELECT DISTINCT(managementServer) AS 'chartName', COUNT(*) AS 'chartCount'
		FROM packages
		GROUP BY managementServer;
	</select>
	
	<select id="getOsType" resultMap="packages">
		SELECT DISTINCT(osType) AS 'chartName', COUNT(*) AS 'chartCount'
		FROM packages
		WHERE managementServer = 'Agent'
		GROUP BY osType;
	</select>
	
	<select id="getChartRequestProductCategory" resultMap="packages">
		SELECT 
			(SELECT COUNT(*) FROM packages WHERE requestProductCategory LIKE '%TOS 5.0%' AND managementServer = 'Agent') AS 'chartColumn1',
			(SELECT COUNT(*) FROM packages WHERE requestProductCategory LIKE '%TOS 3.0%' AND managementServer = 'Agent') AS 'chartColumn2',
			(SELECT COUNT(*) FROM packages WHERE requestProductCategory LIKE '%TOS 2.0.60%' AND managementServer = 'Agent') AS 'chartColumn3',
			(SELECT COUNT(*) FROM packages WHERE requestProductCategory LIKE '%TOS 2.0.70%' AND managementServer = 'Agent') AS 'chartColumn4',
			(SELECT COUNT(*) FROM packages WHERE requestProductCategory LIKE '%iGRIFFIN 5.0%' AND managementServer = 'Agent') AS 'chartColumn5'
		FROM DUAL;
	</select>
	
	<select id="getTopAgentVer" resultType="string">
		SELECT agentVer FROM packages WHERE managementServer = 'Agent' AND deliveryData BETWEEN DATE_ADD(NOW(),INTERVAL -3 MONTH ) AND NOW() AND osType = #{osType} GROUP BY agentVer ORDER BY COUNT(*) DESC LIMIT 1;
	</select>
	
	<select id="getAgentVer" resultMap="packages">
		SELECT agentVer AS 'chartName', COUNT(*) AS 'chartCount'
		FROM packages
		WHERE agentVer LIKE CONCAT('%',#{topAgentVer},'%')
		AND deliveryData BETWEEN DATE_ADD(NOW(),INTERVAL -3 MONTH ) AND NOW();
	</select>
	
	<select id="getDeliveryData" resultMap="packages">
		SELECT DATE_FORMAT(deliveryData,'%m') AS 'chartName', COUNT(*) AS 'chartCount'
		FROM packages
		WHERE	deliveryData BETWEEN CONCAT(YEAR(NOW()),'-01-01') AND CONCAT(YEAR(NOW()),'-12-31')
		GROUP BY chartName;
	</select>
	
	<select id="getCustomerName" resultMap="packages">
		SELECT customerName AS 'chartName', COUNT(*) AS 'chartCount' FROM packages GROUP BY customerName ORDER BY COUNT(*) DESC LIMIT 7;
	</select>
	
	<update id="stateChange">
		UPDATE packages SET statusComment = #{statusComment}, state = #{stateView} WHERE packagesKeyNum = #{packagesKeyNum};
	</update>
	
	<!-- ==================================================================================== -->
	
	<sql id="sqlPackages">
		<trim prefix="WHERE" prefixOverrides="AND|OR">
			<if test="customerName != null and customerName != ''">
				AND (
				<trim prefix="" prefixOverrides="OR">
					<foreach collection="customerNameArr" item="arr">
						OR customerName LIKE CONCAT('%',#{arr},'%')
					</foreach>
				</trim>
				)
			</if>
			<if test="businessName != null and businessName != ''">
				AND (
				<trim prefix="" prefixOverrides="OR">
					<foreach collection="businessNameArr" item="arr">
						OR businessName LIKE CONCAT('%',#{arr},'%')
					</foreach>
				</trim>
				)
			</if>
			<if test="state != null and state != ''">
				AND (
				<trim prefix="" prefixOverrides="OR">
					<foreach collection="stateArr" item="arr">
						OR state LIKE CONCAT('%',#{arr},'%')
					</foreach>
				</trim>
				)
			</if>
			<if test="existingNew != null and existingNew != ''">
				AND (
				<trim prefix="" prefixOverrides="OR">
					<foreach collection="existingNewArr" item="arr">
						OR existingNew LIKE CONCAT('%',#{arr},'%')
					</foreach>
				</trim>
				)
			</if>
			<if test="managementServer != null and managementServer != ''">
				AND (
				<trim prefix="" prefixOverrides="OR">
					<foreach collection="managementServerArr" item="arr">
						OR managementServer LIKE CONCAT('%',#{arr},'%')
					</foreach>
				</trim>
				)
			</if>
			<if test="agentOS != null and agentOS != ''">
				AND (
				<trim prefix="" prefixOverrides="OR">
					<foreach collection="agentOSArr" item="arr">
						OR agentOS LIKE CONCAT('%',#{arr},'%')
					</foreach>
				</trim>
				)
			</if>
			<if test="osDetailVersion != null and osDetailVersion != ''">
				AND (
				<trim prefix="" prefixOverrides="OR">
					<foreach collection="osDetailVersionArr" item="arr">
						OR osDetailVersion LIKE CONCAT('%',#{arr},'%')
					</foreach>
				</trim>
				)
			</if>
			<if test="osType != null and osType != ''">
				AND (
				<trim prefix="" prefixOverrides="OR">
					<foreach collection="osTypeArr" item="arr">
						OR osType LIKE CONCAT('%',#{arr},'%')
					</foreach>
				</trim>
				)
			</if>
			<if test="generalCustom != null and generalCustom != ''">
				AND (
				<trim prefix="" prefixOverrides="OR">
					<foreach collection="generalCustomArr" item="arr">
						OR generalCustom LIKE CONCAT('%',#{arr},'%')
					</foreach>
				</trim>
				)
			</if>
			<if test="agentVer != null and agentVer != ''">
				AND (
				<trim prefix="" prefixOverrides="OR">
					<foreach collection="agentVerArr" item="arr">
						OR agentVer LIKE CONCAT('%',#{arr},'%')
					</foreach>
				</trim>
				)
			</if>
			<if test="packageName != null and packageName != ''">
				AND (
				<trim prefix="" prefixOverrides="OR">
					<foreach collection="packageNameArr" item="arr">
						OR packageName LIKE CONCAT('%',#{arr},'%')
					</foreach>
				</trim>
				)
			</if>
			<if test="manager != null and manager != ''">
				AND (
				<trim prefix="" prefixOverrides="OR">
					<foreach collection="managerArr" item="arr">
						OR manager LIKE CONCAT('%',#{arr},'%')
					</foreach>
				</trim>
				)
			</if>
			<if test="requestProductCategory != null and requestProductCategory != ''">
				AND (
				<trim prefix="" prefixOverrides="OR">
					<foreach collection="requestProductCategoryArr" item="arr">
						OR requestProductCategory LIKE CONCAT('%',#{arr},'%')
					</foreach>
				</trim>
				)
			</if>
			<if test="deliveryMethod != null and deliveryMethod != ''">
				AND (
				<trim prefix="" prefixOverrides="OR">
					<foreach collection="deliveryMethodArr" item="arr">
						OR deliveryMethod LIKE CONCAT('%',#{arr},'%')
					</foreach>
				</trim>
				)
			</if>
			<if test="requestDate != null and requestDate != ''">
				AND requestDate = #{requestDate}
			</if>
			<if test="deliveryDataStart != null and deliveryDataStart != ''">
				AND deliveryData BETWEEN #{deliveryDataStart} AND #{deliveryDataEnd}
			</if>
		</trim>
	</sql>
</mapper>