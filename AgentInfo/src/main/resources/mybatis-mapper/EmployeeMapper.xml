<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
        
<mapper namespace="employee">
	<resultMap type="com.secuve.agentInfo.vo.Employee" id="employee"></resultMap>
	<resultMap type="com.secuve.agentInfo.vo.UserAlarm" id="userAlarm"></resultMap>
	
	<select id="getEmployee" resultMap="employee" parameterType="string">
		SELECT *
    	FROM
    	(
    		SELECT ROW_NUMBER() OVER(ORDER BY ${sidx} ${sord}) RowNo, a.*
    		FROM (
				SELECT e.*, u.usersRole FROM employee e INNER JOIN users u
				ON e.employeeId = u.usersId
					<include refid="sqlEmployee" />
			) a
		) b
    	WHERE b.RowNo between (1+(${page} - 1 ) * ${rows}) and (${page} * ${rows});
	</select>
	
	<delete id="delEmployee" parameterType="string">
		DELETE FROM employee WHERE employeeId = #{employeeId};
	</delete>
	
	<select id="getEmployeeCount" resultType="_int">
		SELECT COUNT(*) FROM employee e INNER JOIN users u
		ON e.employeeId = u.usersId
			<include refid="sqlEmployee" />
	</select>
	
	<insert id="insertEmployee">
		INSERT INTO employee(employeeId, departmentName, departmentFullPath, departmentParentPath, employeeType, employeeRank, employeeName, employeePhone, employeeEmail, employeeStatus, employeeRegistrant, employeeRegistrationDate) 
		VALUES(#{employeeId}, #{departmentName}, #{departmentFullPath}, #{departmentParentPath}, #{employeeType}, #{employeeRank}, #{employeeName}, #{employeePhone}, #{employeeEmail}, #{employeeStatus}, #{employeeRegistrant}, #{employeeRegistrationDate});
	</insert>
	
	<select id="getEmployeeOne" parameterType="string" resultMap="employee">
		SELECT e.*, u.usersRole, u.pwdChangeYn, u.usersLockStatus FROM employee e INNER JOIN users u 
		ON e.employeeId = u.usersId
		WHERE e.employeeId = #{employeeId};
	</select>
	
	<update id="updateEmployee">
		UPDATE employee SET employeeType = #{employeeType}, employeeRank = #{employeeRank}, employeeName = #{employeeName}, employeePhone = #{employeePhone}, employeeEmail = #{employeeEmail}, employeeStatus = #{employeeStatus}, departmentName = #{departmentName}, employeeModifier = #{employeeModifier}, employeeModifiedDate = #{employeeModifiedDate} 
		WHERE employeeId = #{employeeId}
	</update>
	
	<update id="updateUsers">
		UPDATE users SET usersPw = #{usersPw}, usersRole = #{usersRole}, pwdChangeYn = #{pwdChangeYn} WHERE usersId = #{employeeId} 
	</update>
	
	<update id="updateUsersRole">
		UPDATE users SET usersRole = #{usersRole}, pwdChangeYn = #{pwdChangeYn} WHERE usersId = #{employeeId}
	</update>
	
	<update id="updateDept">
		UPDATE employee SET departmentFullPath = #{departmentFullPath}, departmentParentPath = #{departmentParentPath}, departmentName = #{departmentName} WHERE departmentFullPath = #{ordDepartmentFullPath};
	</update>
	
	<update id="updateDepartmentMove">
		UPDATE employee SET departmentFullPath = #{departmentFullPath}, departmentParentPath = #{departmentParentPath}, departmentName = #{departmentName} WHERE employeeId = #{employeeId};
	</update>
	
	<select id="pwdCheck" parameterType="string" resultType="string">
		SELECT pwdChangeYn FROM users WHERE usersId = #{usersId};
	</select>
	
	<select id="getUsersPw" parameterType="string" resultType="string">
		SELECT usersPw FROM users WHERE usersId = #{usersId};
	</select>
	
	<update id="updateUserPwd">
		UPDATE users SET usersPw = #{changePwd}, pwdChangeYn = 'NO'  WHERE usersId = #{usersId};
	</update>
	
	<delete id="delUsers">
		DELETE FROM users WHERE usersId = #{employeeId};
	</delete>
	
	<select id="getEmployeeId" resultType="string">
		SELECT DISTINCT employeeId FROM employee;
	</select>
	
	<select id="getEmployeeName" resultType="string">
		SELECT DISTINCT employeeName FROM employee;
	</select>
	
	<update id="lastLogin">
		UPDATE employee SET lastLogin = #{lastLogin} WHERE employeeId = #{usersId};
	</update>
	
	<select id="loginSession" parameterType="string" resultType="string">
		SELECT lastLogin FROM employee WHERE employeeId = #{employeeId};
	</select>
	
	<select id="getUsersRole" parameterType="string" resultType="string">
		SELECT usersRole FROM users WHERE usersId = #{usersId};
	</select> 
	
	<select id="getEmployeeAll" resultMap="employee">
		SELECT * FROM employee;
	</select>
	
	<select id="getEmployeeDepartment" parameterType="string" resultType="string">
		SELECT departmentName FROM employee WHERE employeeId = #{employeeId};
	</select>
	
	<select id="getDepartmentEmail" resultMap="employee">
		SELECT * FROM employee WHERE departmentName = #{departmentName};
	</select>
	
	<select id="getUserAlarm" parameterType="string" resultMap="userAlarm">
		SELECT * FROM userAlarm WHERE userAlarmEmployeeId = #{userAlarmEmployeeId} AND userAlarmState = 'N';
	</select>
	
	<insert id="setUserAlarm">
		INSERT INTO userAlarm(userAlarmEmployeeId, userAlarmTitle, userAlarmDate, userAlarmState, userAlarmURL, userAlarmParameter, userAlarmRegistrant, userAlarmRegistrationDate)
		VALUES(#{userAlarmEmployeeId},#{userAlarmTitle},#{userAlarmDate},'N',#{userAlarmURL},#{userAlarmParameter},#{userAlarmRegistrant},#{userAlarmRegistrationDate}); 
	</insert>
	
	<delete id="delUserAlarm" parameterType="_int">
		DELETE FROM userAlarm WHERE userAlarmParameter = #{questionKeyNum};
	</delete>
	
	<update id="updateUserAlarm">
		UPDATE userAlarm SET userAlarmState = 'R', userAlarmModifier = #{userAlarmModifier}, userAlarmModifiedDate = #{userAlarmModifiedDate} WHERE userAlarmParameter = #{userAlarmParameter};
	</update>
	
	<!-- ==================================================================================== -->
	
	<sql id="sqlEmployee">
		<trim prefix="WHERE" prefixOverrides="AND">
			<if test="employeeId != null and employeeId != ''">
				AND e.employeeId LIKE CONCAT('%',#{employeeId},'%')
			</if>
			<if test="employeeType != null and employeeType != ''">
				AND e.employeeType LIKE CONCAT('%',#{employeeType},'%')
			</if>
			<if test="employeeRank != null and employeeRank != ''">
				AND e.employeeRank LIKE CONCAT('%',#{employeeRank},'%')
			</if>
			<if test="employeeName != null and employeeName != ''">
				AND e.employeeName LIKE CONCAT('%',#{employeeName},'%')
			</if>
			<if test="employeeEmail != null and employeeEmail != ''">
				AND e.employeeEmail LIKE CONCAT('%',#{employeeEmail},'%')
			</if>
			<if test="employeeStatus != null and employeeStatus != ''">
				AND e.employeeStatus LIKE CONCAT('%',#{employeeStatus},'%')
			</if>
			<if test="employeePhone != null and employeePhone != ''">
				AND e.employeePhone LIKE CONCAT('%',#{employeePhone},'%')
			</if>
			<if test="departmentName != null and departmentName != ''">
				AND e.departmentName = #{departmentName}
			</if>
			<if test="departmentFullPath != null and departmentFullPath != ''">
				AND e.departmentFullPath = #{departmentFullPath}
			</if>
		</trim>
	</sql>
</mapper>