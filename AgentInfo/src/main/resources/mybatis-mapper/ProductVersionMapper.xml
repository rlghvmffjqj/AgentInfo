<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
        
<mapper namespace="productVersion">
	<resultMap type="com.secuve.agentInfo.vo.MenuSetting" id="menuSetting"></resultMap>
	<resultMap type="com.secuve.agentInfo.vo.Compatibility" id="compatibility"></resultMap>
	
	
	<select id="getProductVersionNoneExist" resultType="_int">
		SELECT COUNT(*) FROM menuSetting 
		WHERE menuTitle = #{mainTitle} 
		AND menuType = 'main'
		<if test="subTitle != null and subTitle != ''">
			AND menuKeyNum = (SELECT menuParentKeyNum
							 FROM menuSetting
							 WHERE menuTitle = #{subTitle}
							 AND menuType = 'sub') 
		</if>
	</select>
	
	<update id="createItem">
		CREATE TABLE ${tableName} (
			productVersionKeyNum INT PRIMARY KEY,
			menuKeyNum INT DEFAULT ${menuParentKeyNum},
			${menuTitle} ${menuItemType}
		)
	</update>
	
	<update id="dropItem">
		DROP TABLE ${tableName};
	</update>
	
	<update id="alterItem">
		ALTER TABLE ${tableName} ADD COLUMN ${menuTitle} ${menuItemType};
	</update>
	
	<update id="alterDeleteItem">
		ALTER TABLE ${tableName} DROP COLUMN ${menuTitle};
	</update>
	
	<update id="alterUpdateItem">
		ALTER TABLE ${tableName} CHANGE ${oldTitle} ${menuTitle} ${menuItemType};
	</update>
	
	<select id="getProductVersionList" parameterType="map" resultType="map">
		SELECT *
    	FROM
    	(
    		SELECT ROW_NUMBER() OVER(ORDER BY ${sidx} ${sord}) RowNo, a.*
    		FROM (
				SELECT *
				FROM ${productData}
				<include refid="sqlProductVersion" />
			) a
		) b
    	WHERE b.RowNo between (1+(${page} - 1 ) * ${rows}) and (${page} * ${rows});
	</select>
	
	<select id="getProductVersionListCount" parameterType="map" resultType="_int">
		SELECT COUNT(*) FROM ${productData}
		<include refid="sqlProductVersion" />;
	</select>
	
	<insert id="insertProductVersion" parameterType="map">
		<selectKey resultType="long" keyProperty="productVersionKeyNum" order="BEFORE">
			SELECT NEXT VALUE FOR seq_productVersion
		</selectKey>
		
		INSERT INTO ${tableName}
		<trim prefix="(" suffix=")" suffixOverrides=",">
			productVersionKeyNum,
			<foreach collection="columnMap.keySet()" item="col">
      			${col},
    		</foreach>
  		</trim>
  		VALUES
  		<trim prefix="(" suffix=")" suffixOverrides=",">
  			#{productVersionKeyNum},
    		<foreach collection="columnMap.keySet()" item="col">
      			#{columnMap[${col}]},
    		</foreach>
  		</trim>
	</insert>
	
	<insert id="insertTableManagerProductVersion" parameterType="map">
		INSERT INTO tableManagerProductVersion(menuKeyNum, productVersionKeyNum) 
		VALUES(#{menuKeyNum}, #{productVersionKeyNum});
	</insert>
	
	
	<delete id="delProductVersion" parameterType="map">
		DELETE FROM ${tableName} WHERE productVersionKeyNum = ${productVersionKeyNum};
	</delete>
	
	<update id="updateProductVersion" parameterType="map">
		UPDATE ProductVersion_${menuKeyNum}
		<set>
	        <foreach collection="columnMap.keySet()" item="col">
	            ${col} = #{columnMap[${col}]},
	        </foreach>
    	</set>
		WHERE productVersionKeyNum = ${productVersionKeyNum} 
	</update>
	
	<select id="getMenuItemSort" parameterType="_int" resultType="string">
		SELECT DISTINCT menuItemSort  FROM menusetting WHERE menuParentKeyNum = #{menuKeyNum};
	</select>
	
	<select id="getcompatibilityList" resultMap="compatibility" parameterType="string">
		SELECT *
    	FROM
    	(
    		SELECT ROW_NUMBER() OVER(ORDER BY ${sidx} ${sord}) RowNo, a.*
    		FROM (
				SELECT 
					pv.productVersionKeyNum,
					main.menuTitle AS mainMenuTitle,
					sub.menuTitle AS subMenuTitle,
					pv.packageName,
					pv.location,
					pv.packageDate,
					pv.version
				FROM (
					<foreach collection="productVersionTable" item="table" separator="UNION ALL">
		                SELECT 
		                    productVersionKeyNum,
		                    menuKeyNum, 
		                    packageName, 
		                    location, 
		                    packageDate,
		                    '${table.substring(table.indexOf("_") + 1)}' AS version
		                FROM ${table}
		                <trim prefix="WHERE" prefixOverrides="AND|OR">
							<if test="packageNameView != null and packageNameView != ''">
								AND packageName LIKE CONCAT('%',#{packageNameView},'%')
							</if>
							<if test="locationView != null and locationView != ''">
								AND location LIKE CONCAT('%',#{locationView},'%')
							</if>
							<if test="productVersionKeyNumArr.length > 0">
						        AND (
						            <foreach collection="productVersionKeyNumArr" item="arr" separator="OR">
						                productVersionKeyNum = #{arr}
						            </foreach>
						        )
						    </if>
						</trim>
		            </foreach>
				) pv
				LEFT JOIN menusetting sub 
					ON (
					  pv.menuKeyNum = sub.menuKeyNum 
					  AND sub.menuType = 'sub'
					  <if test="subTitleView != null and subTitleView != ''">
					      AND sub.menuTitle LIKE CONCAT('%',#{subTitleView},'%')
					  </if>
					)
				INNER JOIN menusetting main 
				    ON (
						(
						  sub.menuParentKeyNum = main.menuKeyNum 
						  AND main.menuType = 'main'
						  <if test="mainTitleView != null and mainTitleView != ''">
						    AND main.menuTitle LIKE CONCAT('%',#{mainTitleView},'%')
						  </if>
						)
						OR (
						  pv.menuKeyNum = main.menuKeyNum 
						  AND main.menuType = 'main' 
						  AND sub.menuKeyNum IS NULL
						)
					)
				    <if test="subTitleView != null and subTitleView != ''">
					  AND sub.menuTitle IS NOT NULL
					</if>
					<if test="mainTitleView != null and mainTitleView != ''">
					  AND main.menuTitle IS NOT NULL
					</if>
			) a
		) b
    	WHERE b.RowNo between (1+(${page} - 1 ) * ${rows}) and (${page} * ${rows});
	</select>
	
	<select id="getProductVersionTableList" parameterType="string" resultType="string">
		SELECT table_name
		FROM information_schema.tables
		WHERE table_schema = #{databaseName}
  			AND table_name LIKE 'productversion_%';
	</select>
	
	<select id="getcompatibilityListCount" resultType="_int">	
		SELECT COUNT(*)
		FROM (
			<foreach collection="productVersionTable" item="table" separator="UNION ALL">
			        SELECT 
			            productVersionKeyNum,
			            menuKeyNum, 
			            packageName, 
			            location, 
			            packageDate,
			            '${table.substring(table.indexOf("_") + 1)}' AS version
			        FROM ${table}
			        <trim prefix="WHERE" prefixOverrides="AND|OR">
					<if test="packageNameView != null and packageNameView != ''">
						AND packageName LIKE CONCAT('%',#{packageNameView},'%')
					</if>
					<if test="locationView != null and locationView != ''">
						AND location LIKE CONCAT('%',#{locationView},'%')
					</if>
					<if test="productVersionKeyNumArr.length > 0">
					    AND (
					        <foreach collection="productVersionKeyNumArr" item="arr" separator="OR">
					            productVersionKeyNum = #{arr}
					        </foreach>
					    )
					</if>
				</trim>
			    </foreach>
		) pv
		LEFT JOIN menusetting sub 
			ON (
			  pv.menuKeyNum = sub.menuKeyNum 
			  AND sub.menuType = 'sub'
			  <if test="subTitleView != null and subTitleView != ''">
			      AND sub.menuTitle LIKE CONCAT('%',#{subTitleView},'%')
			  </if>
			)
		INNER JOIN menusetting main 
		    ON (
				(
				  sub.menuParentKeyNum = main.menuKeyNum 
				  AND main.menuType = 'main'
				  <if test="mainTitleView != null and mainTitleView != ''">
				    AND main.menuTitle LIKE CONCAT('%',#{mainTitleView},'%')
				  </if>
				)
				OR (
				  pv.menuKeyNum = main.menuKeyNum 
				  AND main.menuType = 'main' 
				  AND sub.menuKeyNum IS NULL
				  <if test="mainTitleView != null and mainTitleView != ''">
				    AND main.menuTitle LIKE CONCAT('%',#{mainTitleView},'%')
				  </if>
				)
			)
		    <if test="subTitleView != null and subTitleView != ''">
			  AND sub.menuTitle IS NOT NULL
			</if>
			<if test="mainTitleView != null and mainTitleView != ''">
			  AND main.menuTitle IS NOT NULL
			</if>
	</select>
	
	<insert id="insertCompatibility">
		INSERT INTO compatibilityProductVersion(menuKeyNum1, productVersionKeyNum1, menuKeyNum2, productVersionKeyNum2)
		VALUES(#{menuKeyNum1}, #{productVersionKeyNum1}, #{menuKeyNum2}, #{productVersionKeyNum2});
	</insert>
	
	<select id="getTableManagerProductVersion" parameterType="_int" resultType="_int">
		SELECT menuKeyNum FROM tableManagerProductVersion WHERE productVersionKeyNum = #{productVersionKeyNum};
	</select>
	
	<select id="getCompatibilityProductVersion" resultMap="compatibility" parameterType="_int">
		SELECT * FROM compatibilityProductVersion WHERE productVersionKeyNum1 = ${productVersionKeyNum} AND menuKeyNum1 = ${menuKeyNum};
	</select>
	
	<insert id="deleteCompatibility">
		DELETE FROM compatibilityProductVersion
		WHERE menuKeyNum1 = #{menuKeyNum1} 
		AND productVersionKeyNum1 = #{productVersionKeyNum1}
		AND menuKeyNum2 = #{menuKeyNum2}
		AND productVersionKeyNum2 = #{productVersionKeyNum2};
	</insert>
	
	<!-- ==================================================================================== -->
	
	<sql id="sqlProductVersion">
		<where>
			<foreach collection="conditions" item="cond">
				<if test="cond.value != null and cond.value != ''">
					AND ${cond.key} LIKE CONCAT('%',#{cond.value},'%')
				</if>
			</foreach>
		</where>
	</sql>
	
</mapper>