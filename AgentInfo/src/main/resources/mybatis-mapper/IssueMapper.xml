<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
        
<mapper namespace="issue">
	<resultMap type="com.secuve.agentInfo.vo.Issue" id="issue"></resultMap>
	
	<select id="getIssueList" resultMap="issue" parameterType="string">
		SELECT DISTINCT issueKeyNum, issueCustomer, issueTitle, issueDate, issueTosms, issueTosrf, issuePortal, issueJava, issueWas
    	FROM
    	(
    		SELECT ROW_NUMBER() OVER(ORDER BY ${sidx} ${sord}) RowNo, a.*
    		FROM (
				SELECT DISTINCT issueKeyNum, issueCustomer, issueTitle, issueDate, issueTosms, issueTosrf, issuePortal, issueJava, issueWas
				FROM issue
					<include refid="sqlIssue" />
			) a
		) b
    	WHERE b.RowNo between (1+(${page} - 1 ) * ${rows}) and (${page} * ${rows});
	</select>
	
	<select id="getIssueListCount" resultType="_int">
		SELECT COUNT(DISTINCT issueKeyNum) FROM issue
			<include refid="sqlIssue" />
	</select>
	
	<select id="getIssueKeyNum" resultType="_int">
		SELECT MAX(issueKeyNum) FROM issue;
	</select>
	
	<insert id="insertIssue">
		INSERT INTO issue(issueKeyNum,issueCustomer,issueTitle,issueDate,issueTosms,issueTosrf,issuePortal,issueJava,issueWas,total,solution,unresolved,hold,issueDivision,issueOs,issueWriter,issueAward,issueMiddle,issueUnder1,issueUnder2,issueUnder3,issueUnder4,issueFlawNum,issueEffect,issueTextResult,issueApplyYn,issueConfirm,issueObstacle,issueNote,issueRegistrant,issueRegistrationDate,issueModifier,issueModifiedDate)
		VALUES(#{issueKeyNum},#{issueCustomer},#{issueTitle},#{issueDate},#{issueTosms},#{issueTosrf},#{issuePortal},#{issueJava},#{issueWas},#{total},#{solution},#{unresolved},#{hold},#{issueDivision},#{issueOs},#{issueWriter},#{issueAward},#{issueMiddle},#{issueUnder1},#{issueUnder2},#{issueUnder3},#{issueUnder4},#{issueFlawNum},#{issueEffect},#{issueTextResult},#{issueApplyYn},#{issueConfirm},#{issueObstacle},#{issueNote},#{issueRegistrant},#{issueRegistrationDate},#{issueModifier},#{issueModifiedDate});
	</insert>
	
	<select id="getSelectInput" resultType="string" parameterType="string">
		SELECT DISTINCT ${selectInput} FROM issue WHERE ${selectInput} != '';
	</select>
	
	<select id="getIssueOne" resultMap="issue" parameterType="_int">
		SELECT * FROM issue WHERE issueKeyNum = #{issueKeyNum};
	</select>
	
	<select id="getIssuePrimaryOne" resultMap="issue" parameterType="_int">
		SELECT * FROM issue WHERE issuePrimaryKeyNum = #{issuePrimaryKeyNum};
	</select>
	
	<select id="getIssueOneTitle" resultMap="issue" parameterType="_int">
		SELECT DISTINCT issueKeyNum, issueCustomer, issueTitle, issueDate, issueTosms, issueTosrf, issuePortal, issueJava, issueWas, total, solution, unresolved, hold
    	FROM issue
   		WHERE issueKeyNum = #{issueKeyNum};
	</select>
	
	<select id="getIssueOneMerge" resultMap="issue" parameterType="_int">
		SELECT DISTINCT issueKeyNum, issueCustomer, issueTitle, issueDate, issueTosms, issueTosrf, issuePortal, issueJava, issueWas, total, solution, unresolved, hold
    	FROM issue
   		WHERE issueKeyNum = #{issueKeyNum};
	</select>
	
	<delete id="delIssue" parameterType="_int">
		DELETE FROM issue WHERE issueKeyNum = #{issueKeyNum};
	</delete>
	
	<update id="setIssueKeyNum">
		UPDATE issue SET issueKeyNum = #{issueMergeKeyNum}, total = #{total}, solution = #{solution}, unresolved = #{unresolved}, hold = #{hold} 
		WHERE issueKeyNum = #{issueKeyNum};
	</update>
	
	<select id="getIssuePDFOne" resultMap="issue" parameterType="_int">
		SELECT * FROM issue WHERE issueKeyNum = #{issueKeyNum}
		AND (
			<trim prefix="" prefixOverrides="OR">
				<foreach collection="chkSelectBox" item="arr">
					OR issueApplyYn = #{arr}
				</foreach>
			</trim>
		)
	</select>
	
	<select id="getIssuePrimaryKeyNumList" resultType="_int" parameterType="_int">
		SELECT issuePrimaryKeyNum FROM issue WHERE issueKeyNum = ${issueKeyNum};
	</select>
	
	<insert id="issuePlus" parameterType="issue" useGeneratedKeys="true" keyProperty="issuePrimaryKeyNum">
		INSERT INTO issue(issueKeyNum, issueCustomer, issueTitle, issueDate, issueTosms, issueTosrf, issuePortal, issueJava, issueWas, total, solution, unresolved, hold, issueRegistrant, issueRegistrationDate) 
		VALUES(${issueKeyNum}, #{issueCustomer}, #{issueTitle}, #{issueDate}, #{issueTosms}, #{issueTosrf}, #{issuePortal}, #{issueJava}, #{issueWas}, #{total}, #{solution}, #{unresolved}, #{hold}, #{issueRegistrant}, #{issueRegistrationDate});
	</insert>
	
	<update id="totalPlus">
		UPDATE issue SET total = total + 1 WHERE issueKeyNum = ${issueKeyNum};
	</update>
	
	<update id="unresolvedPlus">
		UPDATE issue SET unresolved = unresolved + 1 WHERE issueKeyNum = ${issueKeyNum};
	</update>
	
	<select id="getIssueKeyNumOne" resultMap="issue" parameterType="_int">
		SELECT * FROM issue WHERE issueKeyNum = ${issueKeyNum} GROUP BY issueKeyNum;
	</select>
	
	<!-- ==================================================================================== -->
	
	<sql id="sqlIssue">
		<trim prefix="WHERE" prefixOverrides="AND|OR">
			<if test="issueCustomer != null and issueCustomer != ''">
				AND (
				<trim prefix="" prefixOverrides="OR">
					<foreach collection="issueCustomerArr" item="arr">
						OR issueCustomer LIKE CONCAT('%',#{arr},'%')
					</foreach>
				</trim>
				)
			</if>
			<if test="issueTitle != null and issueTitle != ''">
				AND (
				<trim prefix="" prefixOverrides="OR">
					<foreach collection="issueTitleArr" item="arr">
						OR issueTitle LIKE CONCAT('%',#{arr},'%')
					</foreach>
				</trim>
				)
			</if>
			<if test="issueTosms != null and issueTosms != ''">
				AND (
				<trim prefix="" prefixOverrides="OR">
					<foreach collection="issueTosmsArr" item="arr">
						OR issueTosms LIKE CONCAT('%',#{arr},'%')
					</foreach>
				</trim>
				)
			</if>
			<if test="issueTosrf != null and issueTosrf != ''">
				AND (
				<trim prefix="" prefixOverrides="OR">
					<foreach collection="issueTosrfArr" item="arr">
						OR issueTosrf LIKE CONCAT('%',#{arr},'%')
					</foreach>
				</trim>
				)
			</if>
			<if test="issuePortal != null and issuePortal != ''">
				AND (
				<trim prefix="" prefixOverrides="OR">
					<foreach collection="issuePortalArr" item="arr">
						OR issuePortal LIKE CONCAT('%',#{arr},'%')
					</foreach>
				</trim>
				)
			</if>
			<if test="issueJava != null and issueJava != ''">
				AND (
				<trim prefix="" prefixOverrides="OR">
					<foreach collection="issueJavaArr" item="arr">
						OR issueJava LIKE CONCAT('%',#{arr},'%')
					</foreach>
				</trim>
				)
			</if>
			<if test="issueWas != null and issueWas != ''">
				AND (
				<trim prefix="" prefixOverrides="OR">
					<foreach collection="issueWasArr" item="arr">
						OR issueWas LIKE CONCAT('%',#{arr},'%')
					</foreach>
				</trim>
				)
			</if>
			<if test="issueDateStart != null and issueDateStart != ''">
				AND issueDate BETWEEN #{issueDateStart} AND #{issueDateEnd}
			</if>
		</trim>
	</sql>
	
</mapper>