<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
        
<mapper namespace="testCase">
	<resultMap type="com.secuve.agentInfo.vo.TestCase" id="testCase"></resultMap>
	
	<select id="getTestCaseList" resultMap="testCase" parameterType="string">
		SELECT DISTINCT testCaseRouteCustomer, testCaseRouteNote, testCaseRouteDate, testCaseRouteKeyNum
    	FROM
    	(
    		SELECT ROW_NUMBER() OVER(ORDER BY ${sidx} ${sord}) RowNo, a.*
    		FROM (
				SELECT DISTINCT testCaseRouteCustomer, testCaseRouteNote, testCaseRouteDate, testCaseRouteKeyNum
				FROM testCaseRoute
				WHERE testCaseFormName = #{testCaseFormName}
					<include refid="sqlTestCase" />
			) a
		) b
    	WHERE b.RowNo between (1+(${page} - 1 ) * ${rows}) and (${page} * ${rows});
	</select>
	
	<select id="getTestCaseListCount" resultType="_int">
		SELECT COUNT(DISTINCT testCaseRouteCustomer,testCaseRouteNote, testCaseRouteDate) FROM testCaseRoute
		WHERE testCaseFormName = #{testCaseFormName}
			<include refid="sqlTestCase" />
	</select>
	
	<select id="getSearchValue" parameterType="string" resultType="string">
		SELECT DISTINCT ${searchValue} FROM testCaseRoute;
	</select>
	
	<!-- ======================================= -->
	
	<select id="getTestCaseForm" resultMap="testCase">
		SELECT * FROM testCaseForm;
	</select>
	
	<insert id="insertTestCaseForm" parameterType="testCase" useGeneratedKeys="true" keyProperty="testCaseFormKeyNum">
		INSERT INTO testCaseForm(testCaseFormName,testCaseFormRegistrant,testCaseFormRegistrationDate)
		VALUES(#{testCaseFormName},#{testCaseFormRegistrant},#{testCaseFormRegistrationDate});
	</insert>
	
	<select id="testCaseFormNameDuplication" parameterType="string" resultType="_int">
		SELECT COUNT(*) FROM testCaseForm WHERE testCaseFormName = #{testCaseFormName};
	</select>
	
	<delete id="delTestCaseForm">
		DELETE FROM testCaseForm WHERE testCaseFormKeyNum = #{testCaseFormKeyNum};
	</delete>
	
	<update id="updateTestCaseForm">
		UPDATE testCaseForm SET testCaseFormName = #{testCaseFormName} WHERE testCaseFormKeyNum = #{testCaseFormKeyNum};
	</update>
	
	<select id="getTestCaseFormOne" resultMap="testCase">
		SELECT * FROM testCaseForm WHERE testCaseFormKeyNum = #{testCaseFormKeyNum};
	</select>
	
	<delete id="delTestCaseFormRoute">
		DELETE FROM testCaseRoute WHERE testCaseFormKeyNum = #{testCaseFormKeyNum};
	</delete>
	
	<delete id="delTestCaseFormContents">
		DELETE FROM testCaseContents WHERE testCaseFormKeyNum = #{testCaseFormKeyNum};
	</delete>
	
	<update id="updateTestCaseFormRoute">
		UPDATE testCaseRoute SET testCaseFormName = #{testCaseFormName} WHERE testCaseFormKeyNum = #{testCaseFormKeyNum};
	</update>
	
	
	<!-- ======================================= -->
	
	<select id="getRouteList" resultMap="testCase">
		SELECT *
		FROM testCaseRoute
		WHERE testCaseRouteParentPath = #{testCaseRouteParentPath}
		AND testCaseRouteCustomer = #{testCaseRouteCustomer}
		AND testCaseRouteNote = #{testCaseRouteNote}
		AND testCaseFormKeyNum = #{testCaseFormKeyNum}
		ORDER BY testCaseRouteFullPath ASC;
	</select>
	
	<insert id="insertRoute" parameterType="testCase" useGeneratedKeys="true" keyProperty="testCaseRouteKeyNum">
		INSERT INTO testCaseRoute(testCaseRouteKeyNum,testCaseFormKeyNum,testCaseFormName,testCaseRouteCustomer,testCaseRouteNote,testCaseRouteFullPath,testCaseRouteParentPath,testCaseRouteName,testCaseRouteRegistrant,testCaseRouteRegistrationDate,testCaseRouteModifier,testCaseRouteModifiedDate) 
		VALUES(#{testCaseRouteKeyNum},#{testCaseFormKeyNum},#{testCaseFormName},#{testCaseRouteCustomer},#{testCaseRouteNote},#{testCaseRouteFullPath},#{testCaseRouteParentPath},#{testCaseRouteName},#{testCaseRouteRegistrant},#{testCaseRouteRegistrationDate},#{testCaseRouteModifier},#{testCaseRouteModifiedDate});
	</insert>
	
	<select id="getTestCaseRouteFullPath" parameterType="string" resultMap="testCase">
		SELECT * FROM testCaseRoute WHERE testCaseRouteFullPath = #{testCaseRouteFullPath} AND testCaseRouteCustomer = #{testCaseRouteCustomer} AND testCaseRouteNote = #{testCaseRouteNote} AND testCaseFormName = #{testCaseFormName};
	</select>
	
	<select id="getTestCaseRouteParentPath" parameterType="string" resultMap="testCase">
		SELECT * FROM testCaseRoute WHERE testCaseRouteParentPath = #{testCaseRouteParentPath};
	</select>
	
	<delete id="deleteRoute">
		DELETE FROM testCaseRoute WHERE testCaseRouteFullPath = #{testCaseRouteFullPath};
	</delete>
	
	<update id="updateRoute">
		UPDATE testCaseRoute SET testCaseRouteFullPath = #{testCaseRouteFullPath}, testCaseRouteParentPath = #{testCaseRouteParentPath}, testCaseRouteName = #{testCaseRouteName} 
		WHERE testCaseRouteFullPath = #{ordTestCaseFullPath};
	</update>
	
	<select id="getTestCaseRouteFullPathList" resultMap="testCase" parameterType="string">
		SELECT * FROM testCaseRoute 
		WHERE testCaseRouteFullPath = #{testCaseRouteFullPath} OR testCaseRouteFullPath Like #{testCaseRouteParentPath};
	</select>
	
	<update id="updateRouteDate">
		UPDATE testCaseRoute SET testCaseRouteDate = #{testCaseRouteDate} 
		WHERE testCaseFormName = #{testCaseFormName}
		AND testCaseRouteCustomer = #{testCaseRouteCustomer}
		AND testCaseRouteNote = #{testCaseRouteNote};
	</update>
	
	<select id="testCaseConfirmed" parameterType="string" resultType="_int">
		SELECT COUNT(*) FROM testCaseRoute 
		WHERE testCaseRouteCustomer = #{testCaseRouteCustomer}
		AND testCaseRouteNote = #{testCaseRouteNote}
		AND testCaseFormName = #{testCaseFormName};
	</select>
	
	<select id="getTestCaseRouteOne" resultMap="testCase">
		SELECT DISTINCT testCaseFormKeyNum, testCaseRouteCustomer, testCaseRouteNote, testCaseRouteDate FROM testcaseroute WHERE testCaseRouteKeyNum = #{testCaseRouteKeyNum};
	</select>
	
	<select id="getMaxTestCaseRouteKeyNum" resultType="_int">
		SELECT MAX(testCaseRouteKeyNum) FROM testcaseroute;
	</select>
	
	<!-- ======================================= -->
	
	<select id="getTestCaseContents" parameterType="_int" resultMap="testCase">
		SELECT * FROM testCaseContents WHERE testCaseRouteKeyNum = #{testCaseRouteKeyNum};
	</select>
	
	<select id="testCaseDoubleCheck" parameterType="_int" resultType="_int">
		SELECT COUNT(*) FROM testCaseContents WHERE testCaseRouteKeyNum = #{testCaseRouteKeyNum};
	</select>
	
	<insert id="testCaseContentsInsert">
		INSERT INTO testCaseContents(testCaseFormKeyNum, testCaseRouteKeyNum, testCaseContentsRegistrant, testCaseContentsRegistrationDate) 
		VALUES(#{testCaseFormKeyNum}, #{testCaseRouteKeyNum}, #{testCaseContentsRegistrant}, #{testCaseContentsRegistrationDate});
	</insert>
	
	<update id="testCaseContentsUpdate">
		UPDATE testCaseContents SET testCaseContentsMainMenu=#{testCaseContentsMainMenu}, testCaseContentsMediumMenu=#{testCaseContentsMediumMenu}, testCaseContentsSmallMenu=#{testCaseContentsSmallMenu}, testCaseContentsTcCode=#{testCaseContentsTcCode}, testCaseContentsClassificationCode=#{testCaseContentsClassificationCode}, testCaseContentsPurpose=#{testCaseContentsPurpose}, testCaseContentsPreparation=#{testCaseContentsPreparation}, testCaseContentsItem=#{testCaseContentsItem}, testCaseContentsProcedure=#{testCaseContentsProcedure}, testCaseContentsExpectedResult=#{testCaseContentsExpectedResult}, testCaseContentsTestResult=#{testCaseContentsTestResult}, testCaseContentsResultCode=#{testCaseContentsResultCode}, testCaseContentsInfluence=#{testCaseContentsInfluence}, testCaseContentsManager=#{testCaseContentsManager}, testCaseContentsError=#{testCaseContentsError}, testCaseContentsNote=#{testCaseContentsNote},  testCaseContentsModifier=#{testCaseContentsModifier}, testCaseContentsModifiedDate=#{testCaseContentsModifiedDate}
		WHERE  testCaseRouteKeyNum = #{testCaseRouteKeyNum};
	</update>
	
	<delete id="testCaseContentsDelete" parameterType="_int">
		DELETE FROM testCaseContents WHERE testCaseRouteKeyNum = #{testCaseRouteKeyNum};
	</delete>
	
	<!-- ==================================================================================== -->
	
	<sql id="sqlTestCase">
		<if test="testCaseRouteCustomer != null and testCaseRouteCustomer != ''">
			AND (
			<trim prefix="" prefixOverrides="OR">
				<foreach collection="testCaseRouteCustomerArr" item="arr">
					OR testCaseRouteCustomer LIKE CONCAT('%',#{arr},'%')
				</foreach>
			</trim>
			)
		</if>
		<if test="testCaseRouteNote != null and testCaseRouteNote != ''">
			AND (
			<trim prefix="" prefixOverrides="OR">
				<foreach collection="testCaseRouteNoteArr" item="arr">
					OR testCaseRouteNote LIKE CONCAT('%',#{arr},'%')
				</foreach>
			</trim>
			)
		</if>
		<if test="testCaseDateStart != null and testCaseDateStart != ''">
			AND testCaseRouteDate BETWEEN #{testCaseDateStart} AND #{testCaseDateEnd}
		</if>
	</sql>
	
</mapper>