<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
        
<mapper namespace="packagesInternational">
	<resultMap type="com.secuve.agentInfo.vo.PackagesInternational" id="packagesInternational"></resultMap>
	
	<select id="getPackagesInternational" resultMap="packagesInternational" parameterType="string">
		SELECT *
    	FROM
    	(
    		SELECT ROW_NUMBER() OVER(ORDER BY ${sidx} ${sord}) RowNo, a.*
    		FROM (
				SELECT p.*, c.categoryKeyNum FROM packagesInternational p, category c
				WHERE c.categoryName = 'customerName'
				AND c.categoryValue = p.customerName
					<include refid="sqlPackagesInternational" />
			) a
		) b
    	WHERE b.RowNo between (1+(${page} - 1 ) * ${rows}) and (${page} * ${rows});
	</select>
	
	<select id="getPackagesInternationalCount" resultType="_int">
		SELECT COUNT(*) FROM packagesInternational p, category c
		WHERE c.categoryName = 'customerName'
		AND c.categoryValue = p.customerName
			<include refid="sqlPackagesInternational" />
	</select>
	
	<delete id="delPackagesInternational" parameterType="_int">
		DELETE FROM packagesInternational WHERE packagesInternationalKeyNum = #{packagesInternationalKeyNum};
	</delete>
	
	<select id="getPackagesInternationalKeyNum" resultType="_int">
		SELECT MAX(packagesInternationalKeyNum) FROM packagesInternational;
	</select>
	
	<insert id="insertPackagesInternational" parameterType="packagesInternational" useGeneratedKeys="true" keyProperty="packagesInternationalKeyNum">
		INSERT INTO packagesInternational(packagesInternationalKeyNumOrigin, customerName, businessName, networkClassification, requestDate, deliveryData, state, existingNew, managementServer, agentOS, osDetailVersion, generalCustom, osType, agentVer, packageName, manager, requestProductCategory, deliveryMethod, purchaseCategory, note, packagesInternationalRegistrant, packagesInternationalRegistrationDate, statusComment)
		VALUES (#{packagesInternationalKeyNumOrigin}, #{customerNameView}, #{businessNameView}, #{networkClassificationView}, #{requestDateView}, #{deliveryDataView}, '배포완료', #{existingNewView}, #{managementServerView}, #{agentOSView}, #{osDetailVersionView}, #{generalCustomView}, #{osTypeView}, #{agentVerView}, #{packageNameView}, #{managerView}, #{requestProductCategoryView}, #{deliveryMethodView}, #{purchaseCategoryView}, #{noteView}, #{packagesInternationalRegistrant}, #{packagesInternationalRegistrationDate}, #{statusComment});
	</insert>
	
	<select id="getPackagesInternationalOne" parameterType="_int" resultMap="packagesInternational">
		SELECT * FROM packagesInternational WHERE packagesInternationalKeyNum = #{packagesInternationalKeyNum};	
	</select>
	
	<update id="updatePackagesInternational">
		UPDATE packagesInternational SET packagesInternationalKeyNum = #{packagesInternationalKeyNum}, customerName = #{customerNameView}, businessName = #{businessNameView}, networkClassification = #{networkClassificationView}, requestDate = #{requestDateView}, deliveryData = #{deliveryDataView}, existingNew = #{existingNewView}, managementServer = #{managementServerView}, agentOS = #{agentOSView}, osDetailVersion = #{osDetailVersionView}, generalCustom = #{generalCustomView}, osType = #{osTypeView}, agentVer = #{agentVerView}, packageName = #{packageNameView}, manager = #{managerView}, requestProductCategory = #{requestProductCategoryView}, deliveryMethod = #{deliveryMethodView}, purchaseCategory = #{purchaseCategoryView}, note = #{noteView}, packagesInternationalModifier = #{packagesInternationalModifier}, packagesInternationalModifiedDate = #{packagesInternationalModifiedDate}
		WHERE packagesInternationalKeyNum = #{packagesInternationalKeyNum};
	</update>
	
	<select id="getPackagesInternationalListAll" resultMap="packagesInternational" parameterType="string">
		SELECT c.categoryKeyNum, p.* FROM packagesInternational p, category c
		WHERE c.categoryName = 'customerName'
		AND c.categoryValue = p.customerName
			<include refid="sqlPackagesInternational" />
		ORDER BY p.packagesInternationalKeyNumOrigin DESC;
	</select>
	
	<select id="getPackagesInternationalAll" resultMap="packagesInternational">
		SELECT * FROM packagesInternational
	</select>
	
	<update id="plusPackagesInternationalKeyNum">
		UPDATE packagesInternational SET packagesInternationalKeyNumOrigin = packagesInternationalKeyNumOrigin + 1 WHERE packagesInternationalKeyNumOrigin > #{packagesInternationalKeyNumOrigin};
	</update>
	
	<select id="getChartManagementServer" resultMap="packagesInternational">
		SELECT DISTINCT(managementServer) AS 'chartName', COUNT(*) AS 'chartCount'
		FROM packagesInternational
		<if test="managementServerYear != '전체' and managementServerYear != null">
			WHERE deliveryData BETWEEN CONCAT(#{managementServerYear},'-01-01') AND CONCAT(#{managementServerYear},'-12-31')
		</if>
		GROUP BY managementServer;
	</select>
	
	<select id="getOsType" resultMap="packagesInternational">
		SELECT DISTINCT(osType) AS 'chartName', COUNT(*) AS 'chartCount'
		FROM packagesInternational
		WHERE managementServer = 'Agent'
		<if test="osTypeYear != '전체' and osTypeYear != null">
			AND deliveryData BETWEEN CONCAT(#{osTypeYear},'-01-01') AND CONCAT(#{osTypeYear},'-12-31')
		</if>
		GROUP BY osType;
	</select>
	
	<select id="getPackagesInternationalKeyNumOrigin" resultType="_int">
		SELECT MAX(packagesInternationalKeyNumOrigin) FROM packagesInternational;
	</select>
	
	<select id="getChartRequestProductCategory" resultMap="packagesInternational">
		SELECT 
			(SELECT COUNT(*) FROM packagesInternational WHERE requestProductCategory LIKE '%TOS 5.0%' AND managementServer = 'Agent'
			<if test="requestProductCategoryYear != '전체' and requestProductCategoryYear != null">
				AND deliveryData BETWEEN CONCAT(#{requestProductCategoryYear},'-01-01') AND CONCAT(#{requestProductCategoryYear},'-12-31')
			</if>
			) AS 'chartColumn1',
			(SELECT COUNT(*) FROM packagesInternational WHERE requestProductCategory LIKE '%TOS 3.0%' AND managementServer = 'Agent'
			<if test="requestProductCategoryYear != '전체' and requestProductCategoryYear != null">
				AND deliveryData BETWEEN CONCAT(#{requestProductCategoryYear},'-01-01') AND CONCAT(#{requestProductCategoryYear},'-12-31')
			</if>
			) AS 'chartColumn2',
			(SELECT COUNT(*) FROM packagesInternational WHERE requestProductCategory LIKE '%TOS 2.0.60%' AND managementServer = 'Agent'
			<if test="requestProductCategoryYear != '전체' and requestProductCategoryYear != null">
				AND deliveryData BETWEEN CONCAT(#{requestProductCategoryYear},'-01-01') AND CONCAT(#{requestProductCategoryYear},'-12-31')
			</if>
			) AS 'chartColumn3',
			(SELECT COUNT(*) FROM packagesInternational WHERE requestProductCategory LIKE '%TOS 2.0.70%' AND managementServer = 'Agent'
			<if test="requestProductCategoryYear != '전체' and requestProductCategoryYear != null">
				AND deliveryData BETWEEN CONCAT(#{requestProductCategoryYear},'-01-01') AND CONCAT(#{requestProductCategoryYear},'-12-31')
			</if>
			) AS 'chartColumn4',
			(SELECT COUNT(*) FROM packagesInternational WHERE requestProductCategory LIKE '%iGRIFFIN 5.0%' AND managementServer = 'Agent'
			<if test="requestProductCategoryYear != '전체' and requestProductCategoryYear != null">
				AND deliveryData BETWEEN CONCAT(#{requestProductCategoryYear},'-01-01') AND CONCAT(#{requestProductCategoryYear},'-12-31')
			</if>
			) AS 'chartColumn5'
		FROM DUAL;
	</select>
	
	<select id="getTopAgentVer" resultType="string">
		SELECT agentVer FROM packagesInternational WHERE managementServer = 'Agent' AND deliveryData BETWEEN DATE_ADD(NOW(),INTERVAL -3 MONTH ) AND NOW() AND osType = #{osType} GROUP BY agentVer ORDER BY COUNT(*) DESC LIMIT 1;
	</select>
	
	<select id="getAgentVer" resultMap="packagesInternational">
		SELECT agentVer AS 'chartName', COUNT(*) AS 'chartCount'
		FROM packagesInternational
		WHERE agentVer LIKE CONCAT('%',#{topAgentVer},'%')
		AND deliveryData BETWEEN DATE_ADD(NOW(),INTERVAL -3 MONTH ) AND NOW();
	</select>
	
	<select id="getDeliveryData" resultMap="packagesInternational">
		SELECT DATE_FORMAT(deliveryData,'%m') AS 'chartName', COUNT(*) AS 'chartCount'
		FROM packagesInternational
		<if test="deliveryDataYear != null and deliveryDataYear != ''">
			WHERE deliveryData BETWEEN CONCAT(#{deliveryDataYear},'-01-01') AND CONCAT(#{deliveryDataYear},'-12-31')
		</if>
		<if test="deliveryDataYear == null or deliveryDataYear == ''">
			WHERE deliveryData BETWEEN CONCAT(YEAR(NOW()),'-01-01') AND CONCAT(YEAR(NOW()),'-12-31')
		</if>
		GROUP BY chartName;
	</select>
	
	<select id="getDeliveryAvgData" resultMap="packagesInternational">
		SELECT DATE_FORMAT(deliveryData,'%m') AS 'chartName', ROUND(COUNT(*)/${progressYear}) AS 'chartCount'
		FROM packagesInternational
		GROUP BY chartName;
	</select>
	
	<select id="getCustomerName" resultMap="packagesInternational">
		SELECT customerName AS 'chartName', COUNT(*) AS 'chartCount' FROM packagesInternational 
		<if test="customerNameYear != '전체' and customerNameYear != null">
			WHERE deliveryData BETWEEN CONCAT(#{customerNameYear},'-01-01') AND CONCAT(#{customerNameYear},'-12-31')
		</if>
		GROUP BY customerName ORDER BY COUNT(*) DESC LIMIT 7;
	</select>
	
	<update id="stateChange">
		UPDATE packagesInternational SET statusComment = #{statusComment}, state = #{stateView} WHERE packagesInternationalKeyNum = #{packagesInternationalKeyNum};
	</update>
	
	<update id="updateCategoryNameAll">
		UPDATE packagesInternational SET ${categoryName} = #{categoryValueNew} WHERE ${categoryName} = #{categoryValue};
	</update>
	
	<update id="updateBussinessNameAll">
		UPDATE packagesInternational SET businessName = #{categoryBusinessNameNew} WHERE customerName = #{categoryCustomerName} AND businessName = #{categoryBusinessName};
	</update>
	
	<select id="getCategoryCustomerNameList" resultType="string">
		SELECT ${categoryName} FROM packagesInternational WHERE ${categoryName} = #{categoryValue};
	</select>
	
	<select id="getCategoryBusinessCustomerNameList" resultType="string"> 
		SELECT businessName FROM packagesInternational WHERE customerName = #{categoryCustomerName} AND businessName = #{categoryBusinessName};
	</select>
	
	
	<!-- ==================================================================================== -->
	
	<sql id="sqlPackagesInternational">
		<if test="customerName != null and customerName != ''">
			AND (
			<trim prefix="" prefixOverrides="OR">
				<foreach collection="customerNameArr" item="arr">
					OR customerName LIKE CONCAT('%',#{arr},'%')
				</foreach>
			</trim>
			)
		</if>
		<if test="businessName != null and businessName != ''">
			AND (
			<trim prefix="" prefixOverrides="OR">
				<foreach collection="businessNameArr" item="arr">
					OR businessName LIKE CONCAT('%',#{arr},'%')
				</foreach>
			</trim>
			)
		</if>
		<if test="networkClassification != null and networkClassification != ''">
			AND (
			<trim prefix="" prefixOverrides="OR">
				<foreach collection="networkClassificationArr" item="arr">
					OR networkClassification LIKE CONCAT('%',#{arr},'%')
				</foreach>
			</trim>
			)
		</if>
		<if test="state != null and state != ''">
			AND (
			<trim prefix="" prefixOverrides="OR">
				<foreach collection="stateArr" item="arr">
					OR state LIKE CONCAT('%',#{arr},'%')
				</foreach>
			</trim>
			)
		</if>
		<if test="existingNew != null and existingNew != ''">
			AND (
			<trim prefix="" prefixOverrides="OR">
				<foreach collection="existingNewArr" item="arr">
					OR existingNew LIKE CONCAT('%',#{arr},'%')
				</foreach>
			</trim>
			)
		</if>
		<if test="managementServer != null and managementServer != ''">
			AND (
			<trim prefix="" prefixOverrides="OR">
				<foreach collection="managementServerArr" item="arr">
					OR managementServer LIKE CONCAT('%',#{arr},'%')
				</foreach>
			</trim>
			)
		</if>
		<if test="agentOS != null and agentOS != ''">
			AND (
			<trim prefix="" prefixOverrides="OR">
				<foreach collection="agentOSArr" item="arr">
					OR agentOS LIKE CONCAT('%',#{arr},'%')
				</foreach>
			</trim>
			)
		</if>
		<if test="osDetailVersion != null and osDetailVersion != ''">
			AND (
			<trim prefix="" prefixOverrides="OR">
				<foreach collection="osDetailVersionArr" item="arr">
					OR osDetailVersion LIKE CONCAT('%',#{arr},'%')
				</foreach>
			</trim>
			)
		</if>
		<if test="osType != null and osType != ''">
			AND (
			<trim prefix="" prefixOverrides="OR">
				<foreach collection="osTypeArr" item="arr">
					OR osType LIKE CONCAT('%',#{arr},'%')
				</foreach>
			</trim>
			)
		</if>
		<if test="generalCustom != null and generalCustom != ''">
			AND (
			<trim prefix="" prefixOverrides="OR">
				<foreach collection="generalCustomArr" item="arr">
					OR generalCustom LIKE CONCAT('%',#{arr},'%')
				</foreach>
			</trim>
			)
		</if>
		<if test="agentVer != null and agentVer != ''">
			AND (
			<trim prefix="" prefixOverrides="OR">
				<foreach collection="agentVerArr" item="arr">
					OR agentVer LIKE CONCAT('%',#{arr},'%')
				</foreach>
			</trim>
			)
		</if>
		<if test="packageName != null and packageName != ''">
			AND (
			<trim prefix="" prefixOverrides="OR">
				<foreach collection="packageNameArr" item="arr">
					OR packageName LIKE CONCAT('%',#{arr},'%')
				</foreach>
			</trim>
			)
		</if>
		<if test="manager != null and manager != ''">
			AND (
			<trim prefix="" prefixOverrides="OR">
				<foreach collection="managerArr" item="arr">
					OR manager LIKE CONCAT('%',#{arr},'%')
				</foreach>
			</trim>
			)
		</if>
		<if test="requestProductCategory != null and requestProductCategory != ''">
			AND (
			<trim prefix="" prefixOverrides="OR">
				<foreach collection="requestProductCategoryArr" item="arr">
					OR requestProductCategory LIKE CONCAT('%',#{arr},'%')
				</foreach>
			</trim>
			)
		</if>
		<if test="deliveryMethod != null and deliveryMethod != ''">
			AND (
			<trim prefix="" prefixOverrides="OR">
				<foreach collection="deliveryMethodArr" item="arr">
					OR deliveryMethod LIKE CONCAT('%',#{arr},'%')
				</foreach>
			</trim>
			)
		</if>
		<if test="purchaseCategory != null and purchaseCategory != ''">
			AND (
			<trim prefix="" prefixOverrides="OR">
				<foreach collection="purchaseCategoryArr" item="arr">
					OR purchaseCategory LIKE CONCAT('%',#{arr},'%')
				</foreach>
			</trim>
			)
		</if>
		<if test="requestDate != null and requestDate != ''">
			AND requestDate = #{requestDate}
		</if>
		<if test="deliveryDateStart != null and deliveryDateStart != ''">
			AND deliveryData BETWEEN #{deliveryDateStart} AND #{deliveryDateEnd}
		</if>
		<if test="customerId != null and customerId != ''">
			AND(
				<trim prefix="" prefixOverrides="OR">
					<foreach collection="customerIdArr" item="arr">
						OR categorykeyNum = #{arr}
					</foreach>
				</trim>
			)
		</if>
	</sql>
</mapper>